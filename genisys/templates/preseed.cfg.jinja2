# original file from 'https://github.com/boxcutter/debian' released under the Apache-2.0
# license available in this directory as apache-2.0.txt
#
# Debian 7.1.0 preseed file - preseed.cfg
#
# For more information on preseed syntax and commands, refer to:
# http://www.debian.org/releases/stable/i386/apbs01.html.en
#
# For testing, you can fire up a local http server temporary.
# Download the preseed.cfg file locally, cd to the directory where the
# preseed.cfg resides and run hte following command:
#  $ python -m SimpleHTTPServer
# You don't have to restart the server every time you make changes.  Python
# will reload the file from disk every time there is a request.  As long as you
# save your changes they will be reflected in the next HTTP download.  Then to
# test with a PXE boot server, use the following kernel boot parameters:
#  > linux auto url=http://<your_ip>:8000/preseed.cfg hostname=<hostname> locale=en_US keyboard-configuration/modelcode=SKIP
#
# NOTE: If you netboot/PXE boot Debian, it will ignore the value in hostname,
# but you must provide a hostname as a boot parameter to prevent the Debian
# install from prompting for a hostname
d-i debian-installer/locale string en_US

# root account setup
d-i passwd/root-login boolean {{ settings['root-login'] }}
{% if settings['root-login'] %}
d-i passwd/root-password-crypted password {{ settings['root-password'] }}
{% endif %}                                                                        

# setup regular user
{% if settings['username'] is defined %}
d-i passwd/make-user boolean true
d-i passwd/username string {{ settings['username'] }}
d-i passwd/user-fullname string {{ settings['username'] }}
d-i passwd/user-password-crypted password {{ settings['password'] }}
d-i user-setup/encrypt-home boolean false
d-i user-setup/allow-password-weak boolean true

# these are the default groups as of Debian 12.2 they are enumerated here for completeness
# they could be omitted except for the need to differentiate between sudoer and not
{% if settings['sudoer'] %}
d-i passwd/user-default-groups string cdrom floppy audio dip video plugdev users netdev lpadmin scanner sudo
{% else %}
d-i passwd/user-default-groups string cdrom floppy audio dip video plugdev users netdev lpadmin scanner
{% endif %}
{% else %}
d-i passwd/make-user boolean false
{% endif %}

# Clock and time zone setup
d-i clock-setup/utc boolean true
d-i time/zone string UTC
d-i clock-setup/ntp boolean true
# Partitioning
d-i partman-auto/method string lvm
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-md/device_remove_md boolean true
d-i partman-lvm/confirm boolean true
d-i partman-lvm/confirm_nooverwrite boolean true
d-i partman/choose_partition select finish
d-i partman-auto-lvm/guided_size string max
d-i partman-auto/choose_recipe select atomic
d-i partman/default_filesystem string ext3
d-i partman/confirm_write_new_label boolean true
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true
d-i grub-installer/only_debian boolean true
d-i grub-installer/bootdev string default 
# Scan another CD or DVD?
apt-cdrom-setup apt-setup/cdrom/set-first boolean false
# Package mirror
d-i mirror/country string manual
d-i mirror/http/hostname string http.debian.net
d-i mirror/http/directory string /debian
d-i mirror/http/proxy string
d-i apt-setup/use_mirror boolean true
# Don't send reports back to the project
popularity-contest popularity-contest/participate boolean false
# Package selection
tasksel tasksel/first multiselect standard
# Automatically install grub to the MBR
d-i grub-installer/only_debian boolean true
# Turn off last message about the install being complete
d-i finish-install/reboot_in_progress note
d-i pkgsel/include string openssh-server ntp curl nfs-common linux-headers-$(uname -r) build-essential perl dkms

# SSH key addition
{% if ssh_keys_contents %}
d-i preseed/late_command string \
    in-target mkdir -p /root/.ssh; \
    {% for ssh_key_content in ssh_keys_contents %}
    echo "{{ ssh_key_content }}" >> /root/.ssh/authorized_keys; \
    {% endfor %}
    in-target chown -R root:root /root/.ssh/; \
    in-target chmod 644 /root/.ssh/authorized_keys; \
    in-target chmod 700 /root/.ssh/
{% endif %}

# copy firstboot.service file to client
{% if ftp.get('ip') is not none and ftp.get('port') is not none %}
d-i preseed/late_command string ftp {{ ftp['ip'] }}:{{ ftp['port'] }}/ftp/first-boot/genisys-firstboot.service /etc/systemd/system/
{% endif %}
d-i preseed/late_command string chmod 0644 /first-boot
d-i preseed/late_command string chown root /first-boot
# enable systemd service
d-i preseed/late_command string systemctl daemon-reload
d-i preseed/late_command string systemctl enable systemd-firstboot.service
# there must be an entrypoint file
# ensure entrypoint is executable
d-i preseed/late_command string chmod +x /first-boot/entrypoint

# change firstboot owner to root
chown -R root:root /first-boot
